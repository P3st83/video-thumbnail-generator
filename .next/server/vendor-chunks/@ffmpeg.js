"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ffmpeg";
exports.ids = ["vendor-chunks/@ffmpeg"];
exports.modules = {

/***/ "(ssr)/./node_modules/@ffmpeg/ffmpeg/dist/esm/empty.mjs":
/*!********************************************************!*\
  !*** ./node_modules/@ffmpeg/ffmpeg/dist/esm/empty.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FFmpeg: () => (/* binding */ FFmpeg)\n/* harmony export */ });\n// File to be imported in node enviroments\nclass FFmpeg {\n    constructor(){\n        throw new Error(\"ffmpeg.wasm does not support nodejs\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy9mZm1wZWcvZGlzdC9lc20vZW1wdHkubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSwwQ0FBMEM7QUFDbkMsTUFBTUE7SUFDVEMsYUFBYztRQUNWLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tdGh1bWJuYWlsLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL2ZmbXBlZy9kaXN0L2VzbS9lbXB0eS5tanM/NjBiYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIHRvIGJlIGltcG9ydGVkIGluIG5vZGUgZW52aXJvbWVudHNcbmV4cG9ydCBjbGFzcyBGRm1wZWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmZm1wZWcud2FzbSBkb2VzIG5vdCBzdXBwb3J0IG5vZGVqc1wiKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiRkZtcGVnIiwiY29uc3RydWN0b3IiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/ffmpeg/dist/esm/empty.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/util/dist/esm/const.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ffmpeg/util/dist/esm/const.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeaderContentLength: () => (/* binding */ HeaderContentLength)\n/* harmony export */ });\nconst HeaderContentLength = \"Content-Length\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy91dGlsL2Rpc3QvZXNtL2NvbnN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxzQkFBc0IsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tdGh1bWJuYWlsLWdlbmVyYXRvci8uL25vZGVfbW9kdWxlcy9AZmZtcGVnL3V0aWwvZGlzdC9lc20vY29uc3QuanM/YTZmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgSGVhZGVyQ29udGVudExlbmd0aCA9IFwiQ29udGVudC1MZW5ndGhcIjtcbiJdLCJuYW1lcyI6WyJIZWFkZXJDb250ZW50TGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/util/dist/esm/const.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/util/dist/esm/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/@ffmpeg/util/dist/esm/errors.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_INCOMPLETED_DOWNLOAD: () => (/* binding */ ERROR_INCOMPLETED_DOWNLOAD),\n/* harmony export */   ERROR_RESPONSE_BODY_READER: () => (/* binding */ ERROR_RESPONSE_BODY_READER)\n/* harmony export */ });\nconst ERROR_RESPONSE_BODY_READER = new Error(\"failed to get response body reader\");\nconst ERROR_INCOMPLETED_DOWNLOAD = new Error(\"failed to complete download\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZmbXBlZy91dGlsL2Rpc3QvZXNtL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLDZCQUE2QixJQUFJQyxNQUFNLHNDQUFzQztBQUNuRixNQUFNQyw2QkFBNkIsSUFBSUQsTUFBTSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWRlby10aHVtYm5haWwtZ2VuZXJhdG9yLy4vbm9kZV9tb2R1bGVzL0BmZm1wZWcvdXRpbC9kaXN0L2VzbS9lcnJvcnMuanM/NzRlZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgRVJST1JfUkVTUE9OU0VfQk9EWV9SRUFERVIgPSBuZXcgRXJyb3IoXCJmYWlsZWQgdG8gZ2V0IHJlc3BvbnNlIGJvZHkgcmVhZGVyXCIpO1xuZXhwb3J0IGNvbnN0IEVSUk9SX0lOQ09NUExFVEVEX0RPV05MT0FEID0gbmV3IEVycm9yKFwiZmFpbGVkIHRvIGNvbXBsZXRlIGRvd25sb2FkXCIpO1xuIl0sIm5hbWVzIjpbIkVSUk9SX1JFU1BPTlNFX0JPRFlfUkVBREVSIiwiRXJyb3IiLCJFUlJPUl9JTkNPTVBMRVRFRF9ET1dOTE9BRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/util/dist/esm/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ffmpeg/util/dist/esm/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ffmpeg/util/dist/esm/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downloadWithProgress: () => (/* binding */ downloadWithProgress),\n/* harmony export */   fetchFile: () => (/* binding */ fetchFile),\n/* harmony export */   importScript: () => (/* binding */ importScript),\n/* harmony export */   toBlobURL: () => (/* binding */ toBlobURL)\n/* harmony export */ });\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/@ffmpeg/util/dist/esm/errors.js\");\n/* harmony import */ var _const_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./const.js */ \"(ssr)/./node_modules/@ffmpeg/util/dist/esm/const.js\");\n\n\nconst readFromBlobOrFile = (blob)=>new Promise((resolve, reject)=>{\n        const fileReader = new FileReader();\n        fileReader.onload = ()=>{\n            const { result } = fileReader;\n            if (result instanceof ArrayBuffer) {\n                resolve(new Uint8Array(result));\n            } else {\n                resolve(new Uint8Array());\n            }\n        };\n        fileReader.onerror = (event)=>{\n            reject(Error(`File could not be read! Code=${event?.target?.error?.code || -1}`));\n        };\n        fileReader.readAsArrayBuffer(blob);\n    });\n/**\n * An util function to fetch data from url string, base64, URL, File or Blob format.\n *\n * Examples:\n * ```ts\n * // URL\n * await fetchFile(\"http://localhost:3000/video.mp4\");\n * // base64\n * await fetchFile(\"data:<type>;base64,wL2dvYWwgbW9yZ...\");\n * // URL\n * await fetchFile(new URL(\"video.mp4\", import.meta.url));\n * // File\n * fileInput.addEventListener('change', (e) => {\n *   await fetchFile(e.target.files[0]);\n * });\n * // Blob\n * const blob = new Blob(...);\n * await fetchFile(blob);\n * ```\n */ const fetchFile = async (file)=>{\n    let data;\n    if (typeof file === \"string\") {\n        /* From base64 format */ if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(file)) {\n            data = atob(file.split(\",\")[1]).split(\"\").map((c)=>c.charCodeAt(0));\n        /* From remote server/URL */ } else {\n            data = await (await fetch(file)).arrayBuffer();\n        }\n    } else if (file instanceof URL) {\n        data = await (await fetch(file)).arrayBuffer();\n    } else if (file instanceof File || file instanceof Blob) {\n        data = await readFromBlobOrFile(file);\n    } else {\n        return new Uint8Array();\n    }\n    return new Uint8Array(data);\n};\n/**\n * importScript dynamically import a script, useful when you\n * want to use different versions of ffmpeg.wasm based on environment.\n *\n * Example:\n *\n * ```ts\n * await importScript(\"http://localhost:3000/ffmpeg.js\");\n * ```\n */ const importScript = async (url)=>new Promise((resolve)=>{\n        const script = document.createElement(\"script\");\n        const eventHandler = ()=>{\n            script.removeEventListener(\"load\", eventHandler);\n            resolve();\n        };\n        script.src = url;\n        script.type = \"text/javascript\";\n        script.addEventListener(\"load\", eventHandler);\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n    });\n/**\n * Download content of a URL with progress.\n *\n * Progress only works when Content-Length is provided by the server.\n *\n */ const downloadWithProgress = async (url, cb)=>{\n    const resp = await fetch(url);\n    let buf;\n    try {\n        // Set total to -1 to indicate that there is not Content-Type Header.\n        const total = parseInt(resp.headers.get(_const_js__WEBPACK_IMPORTED_MODULE_1__.HeaderContentLength) || \"-1\");\n        const reader = resp.body?.getReader();\n        if (!reader) throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ERROR_RESPONSE_BODY_READER;\n        const chunks = [];\n        let received = 0;\n        for(;;){\n            const { done, value } = await reader.read();\n            const delta = value ? value.length : 0;\n            if (done) {\n                if (total != -1 && total !== received) throw _errors_js__WEBPACK_IMPORTED_MODULE_0__.ERROR_INCOMPLETED_DOWNLOAD;\n                cb && cb({\n                    url,\n                    total,\n                    received,\n                    delta,\n                    done\n                });\n                break;\n            }\n            chunks.push(value);\n            received += delta;\n            cb && cb({\n                url,\n                total,\n                received,\n                delta,\n                done\n            });\n        }\n        const data = new Uint8Array(received);\n        let position = 0;\n        for (const chunk of chunks){\n            data.set(chunk, position);\n            position += chunk.length;\n        }\n        buf = data.buffer;\n    } catch (e) {\n        console.log(`failed to send download progress event: `, e);\n        // Fetch arrayBuffer directly when it is not possible to get progress.\n        buf = await resp.arrayBuffer();\n        cb && cb({\n            url,\n            total: buf.byteLength,\n            received: buf.byteLength,\n            delta: 0,\n            done: true\n        });\n    }\n    return buf;\n};\n/**\n * toBlobURL fetches data from an URL and return a blob URL.\n *\n * Example:\n *\n * ```ts\n * await toBlobURL(\"http://localhost:3000/ffmpeg.js\", \"text/javascript\");\n * ```\n */ const toBlobURL = async (url, mimeType, progress = false, cb)=>{\n    const buf = progress ? await downloadWithProgress(url, cb) : await (await fetch(url)).arrayBuffer();\n    const blob = new Blob([\n        buf\n    ], {\n        type: mimeType\n    });\n    return URL.createObjectURL(blob);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ffmpeg/util/dist/esm/index.js\n");

/***/ })

};
;